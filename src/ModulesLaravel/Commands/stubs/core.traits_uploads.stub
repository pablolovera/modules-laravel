<?php

namespace App\Core\Traits;

use Request;

trait Uploads
{
    /**
     * Este método faz o upload de um único arquivo
     *
     * @param $path
     * @param string $attr  este parâmetro é o nome do campo no html
     * @return bool|string
     */
    public function unique($path, $attr = 'arquivo')
    {
        if ( ! Request::hasFile($attr))
            return false;

        if ($file = Request::file($attr)) :

            return $this->upload($path, $file);

        endif;

        return false;
    }

    /**
     * Este método faz o upload de multiplos arquivos
     *
     * @param $path
     * @param string $attr  este parâmetro é o nome do campo no html
     * @return array|bool
     */
    public function multiple($path, $attr = 'arquivo')
    {
        if ( ! Request::hasFile($attr))
            return false;

        if ($file = Request::file($attr)) :

            foreach ($file as $img) :

                $files[] = $this->upload($path, $img);

            endforeach;

            return $files;

        endif;

        return false;

    }

    /**
     * Realiza o upload dos arquivos para a pasta de destino
     *
     * @param $path
     * @param $file
     * @return string
     */
    private function upload($path, $file)
    {
        $nomeOrig = $file->getClientOriginalName();

        $nomeDest = md5(uniqid($nomeOrig)) . '.' . $file->getClientOriginalExtension();

        $file->move('uploads/' . $path, $nomeDest);

        return $nomeDest;
    }

    /**
     * Deleta um arquivo
     *
     * @param $file pode passar o caminho inteiro do arquivo, contando a partir de uploads/
     * @return bool
     */
    public function delete($file)
    {
        return unlink('uploads/' . $file);
    }
}